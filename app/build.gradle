apply plugin: "com.android.application"

apply plugin: "kotlin-android"

apply plugin: "kotlin-android-extensions"

apply plugin: "kotlin-kapt"

apply plugin: 'androidx.navigation.safeargs.kotlin'

apply plugin: 'com.google.firebase.crashlytics'

apply plugin: 'com.google.firebase.firebase-perf'

apply plugin: 'com.google.firebase.appdistribution'

android {
    buildToolsVersion "29.0.3"

    compileSdkVersion rootProject.compile_sdk_version

    def versionMajor = 0
    def versionMinor = 0
    def versionPatch = 3
    def versionNumber = 4

    defaultConfig {
        applicationId "com.albuquerque.moviecatalog"
        minSdkVersion rootProject.min_sdk_version
        targetSdkVersion rootProject.target_sdk_version
        versionCode versionNumber
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        config {
            Properties properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())

            keyAlias properties.getProperty('keyAlias')
            keyPassword properties.getProperty('keyPassword')
            storeFile file(properties.getProperty('storeFile'))
            storePassword properties.getProperty('storePassword')
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            def prename = outputFile.name.substring(0, outputFile.name.length() - 4)

            if (outputFile != null && outputFile.name.endsWith('.apk') && !outputFile.name.endsWith('debug.apk')) {
                def date = new Date().format('yyyyMMddHHmmss')
                outputFileName = "moviecatalog-${prename}-${versionMajor}.${versionMinor}.${versionPatch}-${versionNumber}-${date}.apk"
            }
        }
    }

    bundle {
        density {
            // Different APKs are generated for devices with different screen densities; true by default.
            enableSplit true
        }
        abi {
            // Different APKs are generated for devices with different CPU architectures; true by default.
            enableSplit true
        }
        language {
            // This is disabled so that the App Bundle does NOT split the APK for each language. same APK for all languages.
            enableSplit false
        }
    }

    buildTypes {

        debug {
            debuggable true
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.config
            resValue "string", "app_name", "MovieCatalog Debug"
        }

        alpha {
            //gradlew assembleAlpha appDistributionUploadAlpha

            firebaseAppDistribution {
                //releaseNotes="Here is new app release note"
                releaseNotes = "Melhorando tela de detalhe de um filme"

                //testers ="tester1@gmail.com,tester2@gmail.com"
                testersFile = "$projectDir/distribution/alpha/testers.txt"

                //groups ="qa-team, android-testers"
                groupsFile = "$projectDir/distribution/alpha/firebase_group.txt"

            }
            debuggable true
            applicationIdSuffix ".alpha"
            signingConfig signingConfigs.config
            resValue "string", "app_name", "MovieCatalog Alpha"
        }

        release {
            //gradlew assembleRelease appDistributionUploadRelease

            firebaseAppDistribution {
                //releaseNotes="Here is new app release note"
                releaseNotes = "release note"

                //testers ="tester1@gmail.com,tester2@gmail.com"
                testersFile = "$projectDir/distribution/release/testers.txt"

                //groups ="qa-team, android-testers"
                groupsFile = "$projectDir/distribution/release/firebase_group.txt"
            }
            debuggable false
            minifyEnabled false
            signingConfig signingConfigs.config
            resValue "string", "app_name", "MovieCatalog"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding { enabled = true }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs = ["-Xallow-result-return-type"]
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"

    // Androidx
    implementation "androidx.core:core-ktx:$androidx_corektx_version"
    implementation "androidx.constraintlayout:constraintlayout:$androidx_constraintlayout_version"
    implementation "androidx.constraintlayout:constraintlayout-solver:$androidx_constraintlayout_version"
    implementation "androidx.recyclerview:recyclerview:$androidx_recyclerview_version"
    implementation "androidx.cardview:cardview:$androidx_cardview_version"
    implementation "androidx.appcompat:appcompat:$androidx_appcompat_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$androidx_navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$androidx_navigation"

    // Material Components
    implementation "com.google.android.material:material:$materialcomponents_version"

    // Room
    api "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    api "androidx.room:room-ktx:$room_version"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    // logging
    implementation "com.squareup.okhttp3:logging-interceptor:$retrofit_logging_version"

    implementation "io.reactivex.rxjava2:rxjava:$rx_java_version"
    implementation "io.reactivex.rxjava2:rxkotlin:$rx_kotlin_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rx_android_version"

    // Stetho
    implementation "com.facebook.stetho:stetho:$stetho_version"
    implementation "com.facebook.stetho:stetho-okhttp3:$stetho_okhttpp3_version", {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }

    // Koin
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-androidx-scope:$koin_version"
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // Glide Transformations
    implementation "jp.wasabeef:glide-transformations:$glide_transformations_version"

    // Firebase
    implementation 'com.google.firebase:firebase-analytics:17.5.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.2.1'
    implementation 'com.google.firebase:firebase-perf:19.0.8'

    apply plugin: 'com.google.gms.google-services'
}

